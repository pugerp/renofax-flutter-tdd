// Mocks generated by Mockito 5.0.17 from annotations
// in renofax/test/features/login/domain/usecases/get_token_access_and_refresh_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:renofax/core/error/failures.dart' as _i5;
import 'package:renofax/features/membership/data/models/login_request.dart'
    as _i8;
import 'package:renofax/features/membership/data/models/token.dart' as _i7;
import 'package:renofax/features/membership/domain/entities/login_reponse.dart'
    as _i6;
import 'package:renofax/features/membership/domain/repositories/login_repository.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i3.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResp>> getTokenAccessAndRefresh(
          String? username, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#getTokenAccessAndRefresh, [username, password]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.LoginResp>>.value(
              _FakeEither_0<_i5.Failure, _i6.LoginResp>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.LoginResp>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Token>> getToken(
          _i8.LoginRequest? req) =>
      (super.noSuchMethod(Invocation.method(#getToken, [req]),
              returnValue: Future<_i2.Either<_i5.Failure, _i7.Token>>.value(
                  _FakeEither_0<_i5.Failure, _i7.Token>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i7.Token>>);
}
